name: CI/CD Pipeline

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # Job 1: Test, Build, and Deploy
  test-build-deploy:
    runs-on: ubuntu-latest

    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'

    # Cache Next.js build for faster subsequent builds
    - name: Cache Next.js build
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          ${{ github.workspace }}/.next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Install Vercel CLI
      run: npm i -g vercel@latest

    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }} --token=${{ secrets.VERCEL_TOKEN }}

    - name: Run ESLint
      run: pnpm lint

    - name: Run unit tests
      run: pnpm test:ci

    # Build with Vercel CLI (generates .vercel/output)
    - name: Build Project Artifacts
      run: vercel build ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}

    # Deploy prebuilt artifacts to Vercel
    - name: Deploy to Vercel
      id: deploy
      run: |
        url=$(vercel deploy --prebuilt ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }})
        echo "url=$url" >> $GITHUB_OUTPUT
        echo "### üöÄ Deployment URL" >> $GITHUB_STEP_SUMMARY
        echo "$url" >> $GITHUB_STEP_SUMMARY

    - name: Comment deployment URL on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '### üöÄ Preview Deployment Ready!\n\n**URL:** ${{ steps.deploy.outputs.url }}\n\n‚úÖ Build completed successfully. You can now test your changes on the preview deployment.'
          })

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: vercel-output
        path: .vercel/output/
        retention-days: 7

  # Job 2: E2E Tests (runs against deployed preview)
  e2e-tests:
    runs-on: ubuntu-latest
    needs: test-build-deploy
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    # Cache Playwright browsers for faster test runs
    - name: Get Playwright version
      id: playwright-version
      run: echo "version=$(pnpm list @playwright/test --depth=0 | grep @playwright | sed 's/.*@//')" >> $GITHUB_OUTPUT

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}

    - name: Install Playwright browsers
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: pnpm exec playwright install --with-deps

    - name: Install Playwright dependencies only
      if: steps.playwright-cache.outputs.cache-hit == 'true'
      run: pnpm exec playwright install-deps

    # Pull Vercel environment for E2E tests
    - name: Install Vercel CLI
      run: npm i -g vercel@latest

    - name: Pull Vercel Environment for E2E
      run: |
        vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        vercel env pull .env --token=${{ secrets.VERCEL_TOKEN }}

    # Run E2E tests against the deployed preview URL
    - name: Run Playwright E2E tests
      run: pnpm test:e2e --project=chromium 
      env:
        CI: true
        BASE_URL: ${{ needs.test-build-deploy.outputs.deployment-url }}

    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

    - name: Comment E2E test results on PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const status = '${{ job.status }}' === 'success' ? '‚úÖ passed' : '‚ùå failed';
          const message = `### E2E Tests ${status}\n\nTests were run against: ${{ needs.test-build-deploy.outputs.deployment-url }}`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });
